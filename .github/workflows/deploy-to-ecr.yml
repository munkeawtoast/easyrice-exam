name: ðŸ”„ Build and deploy serverless to ECR to Lambda
env:
  STAGE: ${{ inputs.STAGE }}
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

permissions:
  id-token: write
  contents: read

on:
  workflow_call:
    inputs:
      AWS_REGION:
        description: 'AWS_REGION'
        type: string
        default: 'ap-southeast-1'
      PROJECT_NAME:
        description: 'PROJECT_NAME'
        type: string
        required: true
      STAGE:
        description: 'STAGE'
        type: string
        required: true
      ECR_REPOSITORY:
        description: 'ECR_REPOSITORY'
        type: string
        required: true
      TAG:
        description: 'TAG'
        type: string
        required: true
    secrets:
      AWS_ACCOUNT_ID:
        required: true

jobs:
  deploy:
    environment: ${{ inputs.STAGE }}
    name: Deploy docker image ${{ inputs.PROJECT_NAME }}:${{ inputs.STAGE }} to ECR
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [20.x]
    steps:
      - name: Log non secret
        run: echo is ${{ vars.TEST }}!!
      - name: Log secret
        run: echo secrets is ${{ secrets.AWS_ACCOUNT_ID }}!!
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/github-action-easyrice
          aws-region: ap-southeast-1
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup node.js 20.x
        uses: actions/setup-node@v3
        with:
          node-version: 20.x
      - name: Install pnpm v8
        uses: pnpm/action-setup@v2
        id: pnpm-install
        with:
          version: 8
          run_install: false
      - name: Get pnpm store directory
        id: pnpm-cache
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT
      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-
      - name: Install dependencies
        run: pnpm install
      - name: Build code
        run: npx nx run ${{ inputs.PROJECT_NAME }}:docker-build -- --no-cache
      - name: Deploy to ECR
        run: |
          aws ecr get-login-password --region ${{ inputs.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.ap-southeast-1.amazonaws.com/${{ inputs.ECR_REPOSITORY }}
          docker tag ${{ inputs.PROJECT_NAME }}:latest ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.ap-southeast-1.amazonaws.com/${{ inputs.ECR_REPOSITORY }}:latest
          docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.ap-southeast-1.amazonaws.com/${{ inputs.ECR_REPOSITORY }}:latest
          docker tag ${{ inputs.PROJECT_NAME }}:latest ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.ap-southeast-1.amazonaws.com/${{ inputs.ECR_REPOSITORY }}:${{ inputs.TAG }}
          docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.ap-southeast-1.amazonaws.com/${{ inputs.ECR_REPOSITORY }}:${{ inputs.TAG }}
      - name: Update Lambda Code
        run: |
          aws lambda update-function-code \
            --function-name ${{ inputs.PROJECT_NAME }}-${{ inputs.STAGE }} \
            --image-uri ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ inputs.AWS_REGION }}.amazonaws.com/${{ inputs.ECR_REPOSITORY }}:${{ inputs.TAG }} \
            --region ${{ inputs.AWS_REGION }}
          aws lambda wait function-updated \
            --function-name ${{ inputs.PROJECT_NAME }}-${{ inputs.STAGE }} \
            --region ${{ inputs.AWS_REGION }}
